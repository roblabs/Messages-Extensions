// Copyright ePi Rational, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: MIT
import Foundation
import Messages
import Messages_Extensions
import OSLog

// MARK: - Tracking Messages
//   for a [MSMessagesAppViewController](https://developer.apple.com/documentation/messages/msmessagesappviewcontroller)
extension MSMessagesAppViewController {
    /// Invoked in response to the user selecting a message object in the transcript, before the system updates the conversation’s [selectedMessage](https://developer.apple.com/documentation/messages/msconversation/1648186-selectedmessage) property.
    ///
    /// - Parameters:
    ///   - message: The message selected by the user.
    ///   - conversation: The current conversation.
    ///
    /// This method is called when the user selects one of your app’s message objects in the transcript while your extension is active.
    /// You can access the previously selected message (if any) from the conversation object’s selectedMessage property.
    ///
    /// This method is called when a new message arrives while your extension is active.  You receive notifications about messages sent using your extension only.  You cannot interact with messages from other extensions.
    ///
    /// The system does not call this method if the controller’s presentationStyle property is `MSMessagesAppPresentationStyle.transcript`, or if its presentationContext property is `MSMessagesAppPresentationContext.media`.
    override func willSelect(_ message: MSMessage, conversation: MSConversation) {
        OSLog.logEvent(.event, "MSMessage: Tracking Messages")
    }
    
    /// Invoked in response to the user selecting a message object in the transcript, after the system updates the conversation’s [selectedMessage](https://developer.apple.com/documentation/messages/msconversation/1648186-selectedmessage) property.
    ///
    /// - Parameters:
    ///   - message: The message selected by the user.
    ///   - conversation: The current conversation.
    ///
    /// This method is called when the user selects one of your app’s message objects in the transcript while your extension is active. Both the message parameter and the conversation object’s selectedMessage property contain the message selected by the user.
    ///
    /// If you need to access the previously selected message, override the `willSelect(_:conversation:)` method instead.
    ///
    /// This method is called when a new message arrives while your extension is active. You receive notifications about messages sent using your extension only. You cannot interact with messages from other extensions.
    /// The system does not call this method if the controller’s presentationStyle property is `MSMessagesAppPresentationStyle.transcript`, or if its presentationContext property is `MSMessagesAppPresentationContext.media`.
    override func didSelect(_ message: MSMessage, conversation: MSConversation) {
        OSLog.logEvent(.event, "MSMessage: Tracking Messages")
    }
    
    /// Invoked when the iMessage app receives a new message object.
    ///
    /// - Parameters:
    ///   - message: The received message object.
    ///   - conversation: The conversation that the user is currently viewing in the Messages app.
    ///
    /// Override this method to respond to messages that arrive while your extension is active.
    ///
    /// If your app displays information about the currently selected message, check the incoming message’s session against the selected message’s session. If they match, update the information displayed in your user interface to represent the most recent message data.
    ///
    /// **Notes when creating new iMessage App:**
    /// *Called when a message arrives that was generated by another instance of this extension on a remote device.*
    /// *Use this method to trigger UI updates in response to the message.*
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        OSLog.logEvent(.event, "MSMessage: Tracking Messages")
    }
    
    /// Invoked when the user sends a message object.
    ///
    /// - Parameters:
    ///   - message: The message being sent.
    ///   - conversation: The conversation that the user is currently viewing in the Messages app.
    ///
    /// Override this method to respond when the user sends an `MSMessage` object.
    ///
    /// This method is called if you use the conversation’s `insert(_:completionHandler:)` method to add an `MSMessage` object to the Messages app’s input field, and the user taps Send. It does not guarantee that the message will be successfully sent or delivered.
    ///
    /// The system does not call this method if the controller’s presentationStyle property is `MSMessagesAppPresentationStyle.transcript`, or if its presentationContext property is `MSMessagesAppPresentationContext.media`.
    ///
    /// **Notes when creating new iMessage App:**
    /// *Called when the user taps the send button.*
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        OSLog.logEvent(.event, "MSMessage: Tracking Messages")
    }
    
    /// Invoked when the user deletes a message object from the Messages app’s input field.
    ///
    /// - Parameters:
    ///   - message: The deleted message object.
    ///   - conversation: The conversation that the user is currently viewing in the Messages app.
    ///
    /// Override this method to respond when a message is canceled.
    ///
    /// This method is called if you use the conversation’s `insert(_:completionHandler:)` method to add an MSMessage object to the Messages app’s input field, and the user subsequently deletes the message object.
    ///
    /// **Notes when creating new iMessage App:**
    /// *Called when the user deletes the message without sending it.*
    /// *Use this to clean up state related to the deleted message.*
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        OSLog.logEvent(.event, "MSMessage: Tracking Messages")
    }
}
